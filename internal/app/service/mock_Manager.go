// Code generated by mockery v2.46.0. DO NOT EDIT.

package service

import (
	config "github.com/simonkimi/minebangumi/internal/app/config"
	database "github.com/simonkimi/minebangumi/internal/pkg/database"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/simonkimi/minebangumi/internal/app/repository"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// GetConfig provides a mock function with given fields:
func (_m *MockManager) GetConfig() config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 config.Config
	if rf, ok := ret.Get(0).(func() config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Config)
		}
	}

	return r0
}

// MockManager_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockManager_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetConfig() *MockManager_GetConfig_Call {
	return &MockManager_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *MockManager_GetConfig_Call) Run(run func()) *MockManager_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetConfig_Call) Return(_a0 config.Config) *MockManager_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetConfig_Call) RunAndReturn(run func() config.Config) *MockManager_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabase provides a mock function with given fields:
func (_m *MockManager) GetDatabase() *database.Database {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDatabase")
	}

	var r0 *database.Database
	if rf, ok := ret.Get(0).(func() *database.Database); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Database)
		}
	}

	return r0
}

// MockManager_GetDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabase'
type MockManager_GetDatabase_Call struct {
	*mock.Call
}

// GetDatabase is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetDatabase() *MockManager_GetDatabase_Call {
	return &MockManager_GetDatabase_Call{Call: _e.mock.On("GetDatabase")}
}

func (_c *MockManager_GetDatabase_Call) Run(run func()) *MockManager_GetDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetDatabase_Call) Return(_a0 *database.Database) *MockManager_GetDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetDatabase_Call) RunAndReturn(run func() *database.Database) *MockManager_GetDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// GetHttpService provides a mock function with given fields:
func (_m *MockManager) GetHttpService() *HttpService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHttpService")
	}

	var r0 *HttpService
	if rf, ok := ret.Get(0).(func() *HttpService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*HttpService)
		}
	}

	return r0
}

// MockManager_GetHttpService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHttpService'
type MockManager_GetHttpService_Call struct {
	*mock.Call
}

// GetHttpService is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetHttpService() *MockManager_GetHttpService_Call {
	return &MockManager_GetHttpService_Call{Call: _e.mock.On("GetHttpService")}
}

func (_c *MockManager_GetHttpService_Call) Run(run func()) *MockManager_GetHttpService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetHttpService_Call) Return(_a0 *HttpService) *MockManager_GetHttpService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetHttpService_Call) RunAndReturn(run func() *HttpService) *MockManager_GetHttpService_Call {
	_c.Call.Return(run)
	return _c
}

// GetHttpX provides a mock function with given fields:
func (_m *MockManager) GetHttpX() HttpX {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHttpX")
	}

	var r0 HttpX
	if rf, ok := ret.Get(0).(func() HttpX); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(HttpX)
		}
	}

	return r0
}

// MockManager_GetHttpX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHttpX'
type MockManager_GetHttpX_Call struct {
	*mock.Call
}

// GetHttpX is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetHttpX() *MockManager_GetHttpX_Call {
	return &MockManager_GetHttpX_Call{Call: _e.mock.On("GetHttpX")}
}

func (_c *MockManager_GetHttpX_Call) Run(run func()) *MockManager_GetHttpX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetHttpX_Call) Return(_a0 HttpX) *MockManager_GetHttpX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetHttpX_Call) RunAndReturn(run func() HttpX) *MockManager_GetHttpX_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepo provides a mock function with given fields:
func (_m *MockManager) GetRepo() *repository.Repo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRepo")
	}

	var r0 *repository.Repo
	if rf, ok := ret.Get(0).(func() *repository.Repo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Repo)
		}
	}

	return r0
}

// MockManager_GetRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepo'
type MockManager_GetRepo_Call struct {
	*mock.Call
}

// GetRepo is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetRepo() *MockManager_GetRepo_Call {
	return &MockManager_GetRepo_Call{Call: _e.mock.On("GetRepo")}
}

func (_c *MockManager_GetRepo_Call) Run(run func()) *MockManager_GetRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetRepo_Call) Return(_a0 *repository.Repo) *MockManager_GetRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetRepo_Call) RunAndReturn(run func() *repository.Repo) *MockManager_GetRepo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
