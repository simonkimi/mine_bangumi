// Code generated by mockery v2.46.0. DO NOT EDIT.

package service

import (
	config "github.com/simonkimi/minebangumi/internal/app/config"
	mikan "github.com/simonkimi/minebangumi/pkg/mikan"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/simonkimi/minebangumi/internal/app/repository"

	tmdb "github.com/simonkimi/minebangumi/pkg/tmdb"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// GetApiProxy provides a mock function with given fields:
func (_m *MockManager) GetApiProxy() *ApiProxyService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApiProxy")
	}

	var r0 *ApiProxyService
	if rf, ok := ret.Get(0).(func() *ApiProxyService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ApiProxyService)
		}
	}

	return r0
}

// MockManager_GetApiProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApiProxy'
type MockManager_GetApiProxy_Call struct {
	*mock.Call
}

// GetApiProxy is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetApiProxy() *MockManager_GetApiProxy_Call {
	return &MockManager_GetApiProxy_Call{Call: _e.mock.On("GetApiProxy")}
}

func (_c *MockManager_GetApiProxy_Call) Run(run func()) *MockManager_GetApiProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetApiProxy_Call) Return(_a0 *ApiProxyService) *MockManager_GetApiProxy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetApiProxy_Call) RunAndReturn(run func() *ApiProxyService) *MockManager_GetApiProxy_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function with given fields:
func (_m *MockManager) GetConfig() config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 config.Config
	if rf, ok := ret.Get(0).(func() config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Config)
		}
	}

	return r0
}

// MockManager_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockManager_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetConfig() *MockManager_GetConfig_Call {
	return &MockManager_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *MockManager_GetConfig_Call) Run(run func()) *MockManager_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetConfig_Call) Return(_a0 config.Config) *MockManager_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetConfig_Call) RunAndReturn(run func() config.Config) *MockManager_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetHttpService provides a mock function with given fields:
func (_m *MockManager) GetHttpService() *HttpService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHttpService")
	}

	var r0 *HttpService
	if rf, ok := ret.Get(0).(func() *HttpService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*HttpService)
		}
	}

	return r0
}

// MockManager_GetHttpService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHttpService'
type MockManager_GetHttpService_Call struct {
	*mock.Call
}

// GetHttpService is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetHttpService() *MockManager_GetHttpService_Call {
	return &MockManager_GetHttpService_Call{Call: _e.mock.On("GetHttpService")}
}

func (_c *MockManager_GetHttpService_Call) Run(run func()) *MockManager_GetHttpService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetHttpService_Call) Return(_a0 *HttpService) *MockManager_GetHttpService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetHttpService_Call) RunAndReturn(run func() *HttpService) *MockManager_GetHttpService_Call {
	_c.Call.Return(run)
	return _c
}

// GetHttpX provides a mock function with given fields:
func (_m *MockManager) GetHttpX() *HttpX {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHttpX")
	}

	var r0 *HttpX
	if rf, ok := ret.Get(0).(func() *HttpX); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*HttpX)
		}
	}

	return r0
}

// MockManager_GetHttpX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHttpX'
type MockManager_GetHttpX_Call struct {
	*mock.Call
}

// GetHttpX is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetHttpX() *MockManager_GetHttpX_Call {
	return &MockManager_GetHttpX_Call{Call: _e.mock.On("GetHttpX")}
}

func (_c *MockManager_GetHttpX_Call) Run(run func()) *MockManager_GetHttpX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetHttpX_Call) Return(_a0 *HttpX) *MockManager_GetHttpX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetHttpX_Call) RunAndReturn(run func() *HttpX) *MockManager_GetHttpX_Call {
	_c.Call.Return(run)
	return _c
}

// GetMikan provides a mock function with given fields:
func (_m *MockManager) GetMikan() *mikan.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMikan")
	}

	var r0 *mikan.Client
	if rf, ok := ret.Get(0).(func() *mikan.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mikan.Client)
		}
	}

	return r0
}

// MockManager_GetMikan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMikan'
type MockManager_GetMikan_Call struct {
	*mock.Call
}

// GetMikan is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetMikan() *MockManager_GetMikan_Call {
	return &MockManager_GetMikan_Call{Call: _e.mock.On("GetMikan")}
}

func (_c *MockManager_GetMikan_Call) Run(run func()) *MockManager_GetMikan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetMikan_Call) Return(_a0 *mikan.Client) *MockManager_GetMikan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetMikan_Call) RunAndReturn(run func() *mikan.Client) *MockManager_GetMikan_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepo provides a mock function with given fields:
func (_m *MockManager) GetRepo() *repository.Repo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRepo")
	}

	var r0 *repository.Repo
	if rf, ok := ret.Get(0).(func() *repository.Repo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Repo)
		}
	}

	return r0
}

// MockManager_GetRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepo'
type MockManager_GetRepo_Call struct {
	*mock.Call
}

// GetRepo is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetRepo() *MockManager_GetRepo_Call {
	return &MockManager_GetRepo_Call{Call: _e.mock.On("GetRepo")}
}

func (_c *MockManager_GetRepo_Call) Run(run func()) *MockManager_GetRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetRepo_Call) Return(_a0 *repository.Repo) *MockManager_GetRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetRepo_Call) RunAndReturn(run func() *repository.Repo) *MockManager_GetRepo_Call {
	_c.Call.Return(run)
	return _c
}

// GetScraper provides a mock function with given fields:
func (_m *MockManager) GetScraper() *ScraperService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScraper")
	}

	var r0 *ScraperService
	if rf, ok := ret.Get(0).(func() *ScraperService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ScraperService)
		}
	}

	return r0
}

// MockManager_GetScraper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScraper'
type MockManager_GetScraper_Call struct {
	*mock.Call
}

// GetScraper is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetScraper() *MockManager_GetScraper_Call {
	return &MockManager_GetScraper_Call{Call: _e.mock.On("GetScraper")}
}

func (_c *MockManager_GetScraper_Call) Run(run func()) *MockManager_GetScraper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetScraper_Call) Return(_a0 *ScraperService) *MockManager_GetScraper_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetScraper_Call) RunAndReturn(run func() *ScraperService) *MockManager_GetScraper_Call {
	_c.Call.Return(run)
	return _c
}

// GetSource provides a mock function with given fields:
func (_m *MockManager) GetSource() *SourceService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSource")
	}

	var r0 *SourceService
	if rf, ok := ret.Get(0).(func() *SourceService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SourceService)
		}
	}

	return r0
}

// MockManager_GetSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSource'
type MockManager_GetSource_Call struct {
	*mock.Call
}

// GetSource is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetSource() *MockManager_GetSource_Call {
	return &MockManager_GetSource_Call{Call: _e.mock.On("GetSource")}
}

func (_c *MockManager_GetSource_Call) Run(run func()) *MockManager_GetSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetSource_Call) Return(_a0 *SourceService) *MockManager_GetSource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetSource_Call) RunAndReturn(run func() *SourceService) *MockManager_GetSource_Call {
	_c.Call.Return(run)
	return _c
}

// GetTmdb provides a mock function with given fields:
func (_m *MockManager) GetTmdb() *tmdb.Tmdb {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTmdb")
	}

	var r0 *tmdb.Tmdb
	if rf, ok := ret.Get(0).(func() *tmdb.Tmdb); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmdb.Tmdb)
		}
	}

	return r0
}

// MockManager_GetTmdb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTmdb'
type MockManager_GetTmdb_Call struct {
	*mock.Call
}

// GetTmdb is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetTmdb() *MockManager_GetTmdb_Call {
	return &MockManager_GetTmdb_Call{Call: _e.mock.On("GetTmdb")}
}

func (_c *MockManager_GetTmdb_Call) Run(run func()) *MockManager_GetTmdb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetTmdb_Call) Return(_a0 *tmdb.Tmdb) *MockManager_GetTmdb_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetTmdb_Call) RunAndReturn(run func() *tmdb.Tmdb) *MockManager_GetTmdb_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
