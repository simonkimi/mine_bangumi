// Code generated by mockery v2.46.0. DO NOT EDIT.

package config

import mock "github.com/stretchr/testify/mock"

// MockConfig is an autogenerated mock type for the Config type
type MockConfig struct {
	mock.Mock
}

type MockConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfig) EXPECT() *MockConfig_Expecter {
	return &MockConfig_Expecter{mock: &_m.Mock}
}

// GetBool provides a mock function with given fields: key
func (_m *MockConfig) GetBool(key *configItem[bool]) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetBool")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*configItem[bool]) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockConfig_GetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBool'
type MockConfig_GetBool_Call struct {
	*mock.Call
}

// GetBool is a helper method to define mock.On call
//   - key *configItem[bool]
func (_e *MockConfig_Expecter) GetBool(key interface{}) *MockConfig_GetBool_Call {
	return &MockConfig_GetBool_Call{Call: _e.mock.On("GetBool", key)}
}

func (_c *MockConfig_GetBool_Call) Run(run func(key *configItem[bool])) *MockConfig_GetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*configItem[bool]))
	})
	return _c
}

func (_c *MockConfig_GetBool_Call) Return(_a0 bool) *MockConfig_GetBool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetBool_Call) RunAndReturn(run func(*configItem[bool]) bool) *MockConfig_GetBool_Call {
	_c.Call.Return(run)
	return _c
}

// GetFloat64 provides a mock function with given fields: key
func (_m *MockConfig) GetFloat64(key *configItem[float64]) float64 {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetFloat64")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(*configItem[float64]) float64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockConfig_GetFloat64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFloat64'
type MockConfig_GetFloat64_Call struct {
	*mock.Call
}

// GetFloat64 is a helper method to define mock.On call
//   - key *configItem[float64]
func (_e *MockConfig_Expecter) GetFloat64(key interface{}) *MockConfig_GetFloat64_Call {
	return &MockConfig_GetFloat64_Call{Call: _e.mock.On("GetFloat64", key)}
}

func (_c *MockConfig_GetFloat64_Call) Run(run func(key *configItem[float64])) *MockConfig_GetFloat64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*configItem[float64]))
	})
	return _c
}

func (_c *MockConfig_GetFloat64_Call) Return(_a0 float64) *MockConfig_GetFloat64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetFloat64_Call) RunAndReturn(run func(*configItem[float64]) float64) *MockConfig_GetFloat64_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt provides a mock function with given fields: key
func (_m *MockConfig) GetInt(key *configItem[int]) int {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetInt")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(*configItem[int]) int); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockConfig_GetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt'
type MockConfig_GetInt_Call struct {
	*mock.Call
}

// GetInt is a helper method to define mock.On call
//   - key *configItem[int]
func (_e *MockConfig_Expecter) GetInt(key interface{}) *MockConfig_GetInt_Call {
	return &MockConfig_GetInt_Call{Call: _e.mock.On("GetInt", key)}
}

func (_c *MockConfig_GetInt_Call) Run(run func(key *configItem[int])) *MockConfig_GetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*configItem[int]))
	})
	return _c
}

func (_c *MockConfig_GetInt_Call) Return(_a0 int) *MockConfig_GetInt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetInt_Call) RunAndReturn(run func(*configItem[int]) int) *MockConfig_GetInt_Call {
	_c.Call.Return(run)
	return _c
}

// GetString provides a mock function with given fields: key
func (_m *MockConfig) GetString(key *configItem[string]) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*configItem[string]) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConfig_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type MockConfig_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - key *configItem[string]
func (_e *MockConfig_Expecter) GetString(key interface{}) *MockConfig_GetString_Call {
	return &MockConfig_GetString_Call{Call: _e.mock.On("GetString", key)}
}

func (_c *MockConfig_GetString_Call) Run(run func(key *configItem[string])) *MockConfig_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*configItem[string]))
	})
	return _c
}

func (_c *MockConfig_GetString_Call) Return(_a0 string) *MockConfig_GetString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetString_Call) RunAndReturn(run func(*configItem[string]) string) *MockConfig_GetString_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields:
func (_m *MockConfig) Save() {
	_m.Called()
}

// MockConfig_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockConfig_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
func (_e *MockConfig_Expecter) Save() *MockConfig_Save_Call {
	return &MockConfig_Save_Call{Call: _e.mock.On("Save")}
}

func (_c *MockConfig_Save_Call) Run(run func()) *MockConfig_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_Save_Call) Return() *MockConfig_Save_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfig_Save_Call) RunAndReturn(run func()) *MockConfig_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SetBool provides a mock function with given fields: key, value
func (_m *MockConfig) SetBool(key *configItem[bool], value bool) {
	_m.Called(key, value)
}

// MockConfig_SetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBool'
type MockConfig_SetBool_Call struct {
	*mock.Call
}

// SetBool is a helper method to define mock.On call
//   - key *configItem[bool]
//   - value bool
func (_e *MockConfig_Expecter) SetBool(key interface{}, value interface{}) *MockConfig_SetBool_Call {
	return &MockConfig_SetBool_Call{Call: _e.mock.On("SetBool", key, value)}
}

func (_c *MockConfig_SetBool_Call) Run(run func(key *configItem[bool], value bool)) *MockConfig_SetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*configItem[bool]), args[1].(bool))
	})
	return _c
}

func (_c *MockConfig_SetBool_Call) Return() *MockConfig_SetBool_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfig_SetBool_Call) RunAndReturn(run func(*configItem[bool], bool)) *MockConfig_SetBool_Call {
	_c.Call.Return(run)
	return _c
}

// SetInt provides a mock function with given fields: key, value
func (_m *MockConfig) SetInt(key *configItem[int], value int) {
	_m.Called(key, value)
}

// MockConfig_SetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInt'
type MockConfig_SetInt_Call struct {
	*mock.Call
}

// SetInt is a helper method to define mock.On call
//   - key *configItem[int]
//   - value int
func (_e *MockConfig_Expecter) SetInt(key interface{}, value interface{}) *MockConfig_SetInt_Call {
	return &MockConfig_SetInt_Call{Call: _e.mock.On("SetInt", key, value)}
}

func (_c *MockConfig_SetInt_Call) Run(run func(key *configItem[int], value int)) *MockConfig_SetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*configItem[int]), args[1].(int))
	})
	return _c
}

func (_c *MockConfig_SetInt_Call) Return() *MockConfig_SetInt_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfig_SetInt_Call) RunAndReturn(run func(*configItem[int], int)) *MockConfig_SetInt_Call {
	_c.Call.Return(run)
	return _c
}

// SetString provides a mock function with given fields: key, value
func (_m *MockConfig) SetString(key *configItem[string], value string) {
	_m.Called(key, value)
}

// MockConfig_SetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetString'
type MockConfig_SetString_Call struct {
	*mock.Call
}

// SetString is a helper method to define mock.On call
//   - key *configItem[string]
//   - value string
func (_e *MockConfig_Expecter) SetString(key interface{}, value interface{}) *MockConfig_SetString_Call {
	return &MockConfig_SetString_Call{Call: _e.mock.On("SetString", key, value)}
}

func (_c *MockConfig_SetString_Call) Run(run func(key *configItem[string], value string)) *MockConfig_SetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*configItem[string]), args[1].(string))
	})
	return _c
}

func (_c *MockConfig_SetString_Call) Return() *MockConfig_SetString_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfig_SetString_Call) RunAndReturn(run func(*configItem[string], string)) *MockConfig_SetString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfig creates a new instance of MockConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfig {
	mock := &MockConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
