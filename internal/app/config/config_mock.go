// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/simonkimi/minebangumi/internal/app/config (interfaces: Config)
//
// Generated by this command:
//
//	mockgen -package config -destination config_mock.go . Config
//

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetBool mocks base method.
func (m *MockConfig) GetBool(arg0 *configItem[bool]) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool.
func (mr *MockConfigMockRecorder) GetBool(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockConfig)(nil).GetBool), arg0)
}

// GetFloat64 mocks base method.
func (m *MockConfig) GetFloat64(arg0 *configItem[float64]) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloat64", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetFloat64 indicates an expected call of GetFloat64.
func (mr *MockConfigMockRecorder) GetFloat64(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloat64", reflect.TypeOf((*MockConfig)(nil).GetFloat64), arg0)
}

// GetInt mocks base method.
func (m *MockConfig) GetInt(arg0 *configItem[int]) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetInt indicates an expected call of GetInt.
func (mr *MockConfigMockRecorder) GetInt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockConfig)(nil).GetInt), arg0)
}

// GetString mocks base method.
func (m *MockConfig) GetString(arg0 *configItem[string]) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString.
func (mr *MockConfigMockRecorder) GetString(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockConfig)(nil).GetString), arg0)
}

// Save mocks base method.
func (m *MockConfig) Save() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save")
}

// Save indicates an expected call of Save.
func (mr *MockConfigMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockConfig)(nil).Save))
}

// SetBool mocks base method.
func (m *MockConfig) SetBool(arg0 *configItem[bool], arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBool", arg0, arg1)
}

// SetBool indicates an expected call of SetBool.
func (mr *MockConfigMockRecorder) SetBool(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBool", reflect.TypeOf((*MockConfig)(nil).SetBool), arg0, arg1)
}

// SetInt mocks base method.
func (m *MockConfig) SetInt(arg0 *configItem[int], arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInt", arg0, arg1)
}

// SetInt indicates an expected call of SetInt.
func (mr *MockConfigMockRecorder) SetInt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInt", reflect.TypeOf((*MockConfig)(nil).SetInt), arg0, arg1)
}

// SetString mocks base method.
func (m *MockConfig) SetString(arg0 *configItem[string], arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetString", arg0, arg1)
}

// SetString indicates an expected call of SetString.
func (mr *MockConfigMockRecorder) SetString(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetString", reflect.TypeOf((*MockConfig)(nil).SetString), arg0, arg1)
}
