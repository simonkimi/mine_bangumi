// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package manager

import (
	"github.com/go-resty/resty/v2"
	"github.com/simonkimi/minebangumi/internal/app/config"
	"github.com/simonkimi/minebangumi/internal/app/service"
	"github.com/simonkimi/minebangumi/pkg/httpx"
	"github.com/simonkimi/minebangumi/pkg/mikan"
	"github.com/simonkimi/minebangumi/pkg/tmdb"
)

// Injectors from wire.go:

func InitializeManager() (*Manager, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	httpxConfig := ProvideHttpXConfig(configConfig)
	httpX := httpx.NewHttpX(httpxConfig)
	v := ProvideTempClient(httpX)
	client := mikan.NewClient(v)
	tmdbConfig := ProvideTmdbConfig(configConfig, httpX)
	tmdbTmdb := tmdb.NewTmdb(tmdbConfig)
	scraperService := service.NewScraperService(tmdbTmdb)
	sourceService := service.NewSourceService(client)
	manager := newManager(configConfig, httpX, client, tmdbTmdb, scraperService, sourceService)
	return manager, nil
}

// wire.go:

func ProvideHttpXConfig(conf *config.Config) *httpx.Config {
	return &httpx.Config{
		ProxyEnabled:  conf.GetBool(config.ProxyEnabled),
		ProxyScheme:   conf.GetString(config.ProxyScheme),
		ProxyHost:     conf.GetString(config.ProxyHost),
		ProxyPort:     conf.GetString(config.ProxyPort),
		ProxyUsername: conf.GetString(config.ProxyUsername),
		ProxyPassword: conf.GetString(config.ProxyPassword),
	}
}

func ProvideTempClient(hx *httpx.HttpX) func() *resty.Client {
	return hx.GetTempClient
}

func ProvideTmdbConfig(conf *config.Config, hx *httpx.HttpX) *tmdb.Config {
	return tmdb.NewConfig(conf.GetString(config.TmdbApiKey), hx.GetTempClient)
}
